"""
Django settings for project project.

Generated by 'django-admin startproject' using Django 5.1.

For more information on this file, see
https://docs.djangoproject.com/en/5.1/topics/settings/

For the full list of settings and their values, see
https://docs.djangoproject.com/en/5.1/ref/settings/
"""
import os
from datetime import timedelta
from environ import Env
from pathlib import Path
from concurrent_log_handler import ConcurrentRotatingFileHandler

from .config.settings_vault import *

# Build paths inside the project like this: BASE_DIR / 'subdir'.
BASE_DIR = Path(__file__).resolve().parent.parent  # django_rest_framework
ROOT_DIR = BASE_DIR  # sample_project
# print("BASE_DIR.parent=", BASE_DIR.parent)
# print("ROOT_DIR=", ROOT_DIR)
env = Env(
    # set casting, default value
    # DEBUG=(bool, False)
)

# SECURITY WARNING: don't run with debug turned on in production!

HOST_URL = env('HOST_URL')

# print("DEBUG=", DEBUG)
print("CORS_ALLOW_METHODS=", CORS_ALLOW_METHODS)

# CORS_ALLOW_ALL_ORIGINS = True

# Quick-start development settings - unsuitable for production
# See https://docs.djangoproject.com/en/5.1/howto/deployment/checklist/

# SECURITY WARNING: keep the secret key used in production secret!
# SECRET_KEY = 'django-insecure-#o55pb&cu@%le&=l_^ucokg_6m8+wm=%n($kwwhclrsg189(=c'

# Application definition

INSTALLED_APPS = [
    'django.contrib.admin',
    'django.contrib.auth',
    'django.contrib.contenttypes',
    'django.contrib.sessions',
    'django.contrib.messages',
    'django.contrib.staticfiles',
    'django.contrib.sitemaps',

    # Third-party apps
    'rest_framework',
    'rest_framework_simplejwt',
    'drf_yasg',
    'corsheaders',
    'django_injector',
    'django_filters',
    'django_tables2',
    'django_extensions',
    'django_cleanup.apps.CleanupConfig',

    # Optional apps
    'allauth',
    'allauth.account',
    'allauth.socialaccount',
    'allauth.socialaccount.providers.openid_connect',

    'keycloak',

    # django_prometheus for grafana
    "django_prometheus",

    # app for config, common utils, db_router, injector_modules
    'app',  # Replace with your app name
    # 'app.apps.CommonAppConfig',

    # orm, restful api, db adapter test
    'user',

    # redirect
    'redirect',

    # langchain
    'lang',

    # ollama
    'ollamas',

    # chatbot
    'chatbot',
    'channels',
    'debug_toolbar',

    # centralized logging
    'servicelog',
    # user JWT token
    'servicetoken',
]

MIDDLEWARE = [
    'django_prometheus.middleware.PrometheusBeforeMiddleware',
    # django_prometheus middleware start, 모든 미들웨어가 프로메테우스 미들웨어 start, before 사이에 있어야 함
    # DI middleware
    # The inject_request_middleware from django_injector is used to make the request object accessible in
    # dependency injection (DI) contexts, such as within services or other components where dependencies are automatically injected.
    # If you are not relying on dependency injection for request-specific objects, then you do not strictly need this middleware.
    # 'django_injector.apps.inject_request_middleware',
    'corsheaders.middleware.CorsMiddleware',
    'debug_toolbar.middleware.DebugToolbarMiddleware',
    'django.middleware.security.SecurityMiddleware',
    'django.contrib.sessions.middleware.SessionMiddleware',
    'django.middleware.common.CommonMiddleware',
    'django.middleware.csrf.CsrfViewMiddleware',
    'django.contrib.auth.middleware.AuthenticationMiddleware',
    'django.contrib.messages.middleware.MessageMiddleware',
    'django.middleware.clickjacking.XFrameOptionsMiddleware',
    'allauth.account.middleware.AccountMiddleware',
    'app.middleware.redirect_error_to_page.Redirect403ToLoginMiddleware',
    'django_prometheus.middleware.PrometheusAfterMiddleware',
    # django_prometheus middleware end, 모든 미들웨어가 프로메테우스 미들웨어 start, before 사이에 있어야 함
]

ROOT_URLCONF = 'project.urls'

TEMPLATES = [
    {
        'BACKEND': 'django.template.backends.django.DjangoTemplates',
        'DIRS': [os.path.join(BASE_DIR, 'templates')],
        'APP_DIRS': True,
        'OPTIONS': {
            'debug': True,
            'context_processors': [
                'django.template.context_processors.debug',
                'django.template.context_processors.request',
                'django.contrib.auth.context_processors.auth',
                'django.contrib.messages.context_processors.messages',
            ],
        },
    },
]

# Redirect users to /swagger after login
LOGIN_REDIRECT_URL = '/swagger'
LOGOUT_REDIRECT_URL = '/login'

LOGIN_URL = '/login'

WSGI_APPLICATION = 'project.wsgi.application'

ASGI_APPLICATION = 'project.asgi.application'

# Channels Layers (if needed, for message broadcasting)
CHANNEL_LAYERS = {
    "default": {
        "BACKEND": "channels.layers.InMemoryChannelLayer",
    },
}

SIMPLE_JWT = {
    'ACCESS_TOKEN_LIFETIME': timedelta(minutes=60),
    'REFRESH_TOKEN_LIFETIME': timedelta(days=7),
    'ROTATE_REFRESH_TOKENS': True,
    'BLACKLIST_AFTER_ROTATION': True,
    'AUTH_HEADER_TYPES': ('Bearer',),
    'AUTH_TOKEN_CLASSES': ('rest_framework_simplejwt.tokens.AccessToken',),
}

# ACCESS_TOKEN_LIFETIME: The duration for which the access token is valid.
# REFRESH_TOKEN_LIFETIME: The duration for which the refresh token is valid.
# ROTATE_REFRESH_TOKENS: If True, a new refresh token is issued when the old one is used.
# BLACKLIST_AFTER_ROTATION: If True, the old refresh token is blacklisted after rotation.
# UPDATE_LAST_LOGIN: If True, updates the user's last login time when a token is refreshed.
# ALGORITHM: The algorithm used to sign the token.
# SIGNING_KEY: The key used to sign the token.
# VERIFYING_KEY: The key used to verify the token.
# AUDIENCE: The audience claim for the token.
# ISSUER: The issuer claim for the token.
# AUTH_HEADER_TYPES: The types of authentication headers accepted.
# USER_ID_FIELD: The field used to identify the user.
# USER_ID_CLAIM: The claim used to store the user ID.
# AUTH_TOKEN_CLASSES: The classes used for authentication tokens.
# TOKEN_TYPE_CLAIM: The claim used to store the token type.
# JTI_CLAIM: The claim used to store the unique identifier for the token.
# SLIDING_TOKEN_REFRESH_EXP_CLAIM: The claim used to store the refresh expiration for sliding tokens.
# SLIDING_TOKEN_LIFETIME: The duration for which a sliding token is valid.
# SLIDING_TOKEN_REFRESH_LIFETIME: The duration for which a sliding token can be refreshed.

# SIMPLE_JWT = {
#     'ACCESS_TOKEN_LIFETIME': timedelta(minutes=5),  # Default is 5 minutes
#     'REFRESH_TOKEN_LIFETIME': timedelta(days=1),    # Default is 1 day
#     'ROTATE_REFRESH_TOKENS': False,
#     'BLACKLIST_AFTER_ROTATION': True,
#     'UPDATE_LAST_LOGIN': False,
#     'ALGORITHM': 'HS256',
#     'SIGNING_KEY': settings.SECRET_KEY,
#     'VERIFYING_KEY': None,
#     'AUDIENCE': None,
#     'ISSUER': None,
#     'AUTH_HEADER_TYPES': ('Bearer',),
#     'USER_ID_FIELD': 'id',
#     'USER_ID_CLAIM': 'user_id',
#     'AUTH_TOKEN_CLASSES': ('rest_framework_simplejwt.tokens.AccessToken',),
#     'TOKEN_TYPE_CLAIM': 'token_type',
#     'JTI_CLAIM': 'jti',
#     'SLIDING_TOKEN_REFRESH_EXP_CLAIM': 'refresh_exp',
#     'SLIDING_TOKEN_LIFETIME': timedelta(minutes=5),
#     'SLIDING_TOKEN_REFRESH_LIFETIME': timedelta(days=1),
# }

# SWAGGER_SETTINGS = {
#     'SECURITY_DEFINITIONS': {
#         'oauth2': {
#             'type': 'oauth2',
#             'flow': 'accessCode',
#             'authorizationUrl': f'{KEYCLOAK_SERVER_URL}/realms/{KEYCLOAK_REALM}/protocol/openid-connect/auth',
#             'tokenUrl': f'{KEYCLOAK_SERVER_URL}/realms/{KEYCLOAK_REALM}/protocol/openid-connect/token',
#             'scopes': {
#                 'openid': 'OpenID Connect scope',
#                 'profile': 'Profile information',
#                 'email': 'Email information'
#             }
#         }
#     },
#     'USE_SESSION_AUTH': False,
#     'OAUTH2_REDIRECT_URL': 'http://localhost/swagger/oauth2-redirect.html',
#     'OAUTH2_CONFIG': {
#         'clientId': KEYCLOAK_CLIENT_ID,
#         'clientSecret': KEYCLOAK_CLIENT_SECRET,
#         'appName': 'Your App Name'
#     },
# }

# <-- django-allauth settings start -->

AUTHENTICATION_BACKENDS = [
    # ...
    'allauth.account.auth_backends.AuthenticationBackend',
    # ...
]

SOCIALACCOUNT_PROVIDERS = {
    "openid_connect": {
        "APPS": [
            {
                "provider_id": "keycloak",
                "name": "Keycloak",
                "client_id": f"{KEYCLOAK_CLIENT_ID}",
                "secret": f"{KEYCLOAK_CLIENT_SECRET}",
                "settings": {
                    "server_url": f"{KEYCLOAK_SERVER_URL}/realms/master/.well-known/openid-configuration",
                },
            }
        ]
    }
}

# <-- django-allauth settings end -->

# Rest Framework
REST_FRAMEWORK = {
    'DEFAULT_AUTHENTICATION_CLASSES': [
        # 'rest_framework_simplejwt.authentication.JWTAuthentication',  # For JWT authentication, Integrate with keycloak
        # Or other authentication classes like:
        'rest_framework.authentication.BasicAuthentication',  # For basic authentication
        'rest_framework.authentication.SessionAuthentication',  # For session authentication
        'rest_framework.authentication.TokenAuthentication',  # For token authentication
        'rest_framework_simplejwt.authentication.JWTAuthentication',  # For JWT authentication
    ],
    'DEFAULT_PERMISSION_CLASSES': [
        'rest_framework.permissions.IsAuthenticated',
    ],
    'DEFAULT_FILTER_BACKENDS': [
        'django_filters.rest_framework.DjangoFilterBackend',
    ],
    'DEFAULT_PARSER_CLASSES': [
        'rest_framework.parsers.FormParser',
        'rest_framework.parsers.MultiPartParser',
        'rest_framework.parsers.JSONParser',
    ],
}

# Configure CORS Headers
# CORS_ALLOWED_ORIGINS = [
#     'http://localhost:8000',
# ]
# Database
# https://docs.djangoproject.com/en/5.1/ref/settings/#databases

# db라우터
DATABASE_ROUTERS = [
    'app.db_router.MultiDBRouter',
]

DATABASES = {
    'default': {
        'ENGINE': POSTGRES_ENGINE,
        'NAME': POSTGRES_DB_TAROT,
        'USER': POSTGRES_USER,
        'PASSWORD': POSTGRES_PASSWORD,
        'HOST': POSTGRES_HOST,
        'PORT': POSTGRES_PORT,
    }
}

# Password validation
# https://docs.djangoproject.com/en/5.1/ref/settings/#auth-password-validators

AUTH_PASSWORD_VALIDATORS = [
    {
        'NAME': 'django.contrib.auth.password_validation.UserAttributeSimilarityValidator',
    },
    {
        'NAME': 'django.contrib.auth.password_validation.MinimumLengthValidator',
    },
    {
        'NAME': 'django.contrib.auth.password_validation.CommonPasswordValidator',
    },
    {
        'NAME': 'django.contrib.auth.password_validation.NumericPasswordValidator',
    },
]

# Internationalization
# https://docs.djangoproject.com/en/5.1/topics/i18n/

LANGUAGE_CODE = 'en-us'

# TIME_ZONE = env('TIME_ZONE')
TIME_ZONE = 'Asia/Seoul'

USE_I18N = True

"""
True 로 설정해야 Django admin schedule 대로 beat 정상 동작
=> False 일 경우 TypeError: can't compare offset-naive and offset-aware datetimes 발생
False 로 설정해야 DB에 변경 된 TIME_ZONE 이 반영 됨 (UTC)
"""
USE_TZ = False

LOG_DIR = os.path.join(BASE_DIR, '.logs')
if not os.path.exists(LOG_DIR):
    os.makedirs(LOG_DIR)

LOGGING = {
    'version': 1,
    'disable_existing_loggers': False,
    'formatters': {
        'verbose': {
            'format': '{levelname} {asctime} {module} {filename}:{lineno} {message}',
            'style': '{',
        },
        'simple': {
            'format': '{levelname} {message}',
            'style': '{',
        },
    },
    'handlers': {
        'console': {
            'level': 'DEBUG',
            'class': 'logging.StreamHandler',
            'formatter': 'verbose',
        },
        'file': {
            'level': 'DEBUG',
            'class': 'concurrent_log_handler.ConcurrentRotatingFileHandler',
            'filename': os.path.join(LOG_DIR, 'debug.log'),
            'formatter': 'verbose',
            'maxBytes': 524288000,  # 500 MB
            'backupCount': 4,
        },
    },
    'loggers': {
        'django': {
            'handlers': ['console', 'file'],
            'level': os.getenv('DJANGO_LOG_LEVEL', 'DEBUG'),
            'propagate': True,
        },
        'celery': {
            'handlers': ['console', 'file'],
            'level': 'DEBUG',
            'propagate': True,
        },
        'scrapy': {
            'handlers': ['console', 'file'],
            'level': 'DEBUG',
            'propagate': True,
        },
    },
}

# Static files (CSS, JavaScript, Images)
# https://docs.djangoproject.com/en/5.1/howto/static-files/

STATIC_URL = '/static/'
STATIC_DIR = os.path.join(BASE_DIR, 'static')
# STATICFILES_DIRS = [
#     STATIC_DIR,  # django_rest_framework/static
# ]
# print(f"STATICFILES_DIRS : {STATICFILES_DIRS}")

STATIC_ROOT = os.path.join(BASE_DIR, '.static_root')  # django_rest_framework/static
print(f"STATIC_ROOT : {STATIC_ROOT}")

MEDIA_URL = '/media/'
MEDIA_ROOT = os.path.join(BASE_DIR, '.media_root')
print(f"MEDIA_ROOT : {MEDIA_ROOT}")

# Default primary key field type
# https://docs.djangoproject.com/en/5.1/ref/settings/#default-auto-field

DEFAULT_AUTO_FIELD = 'django.db.models.BigAutoField'
